'\" t
.TH QTabWidget 3qt "2 February 2007" "Trolltech AS" \" -*- nroff -*-
.\" Copyright 1992-2007 Trolltech ASA.  All rights reserved.  See the
.\" license file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QTabWidget \- Stack of tabbed widgets
.SH SYNOPSIS
\fC#include <ntqtabwidget.h>\fR
.PP
Inherits TQWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fBQTabWidget\fR ( TQWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
.br
.ti -1c
.BI "virtual void \fBaddTab\fR ( TQWidget * child, const TQString & label )"
.br
.ti -1c
.BI "virtual void \fBaddTab\fR ( TQWidget * child, const QIconSet & iconset, const TQString & label )"
.br
.ti -1c
.BI "virtual void \fBaddTab\fR ( TQWidget * child, QTab * tab )"
.br
.ti -1c
.BI "virtual void \fBinsertTab\fR ( TQWidget * child, const TQString & label, int index = -1 )"
.br
.ti -1c
.BI "virtual void \fBinsertTab\fR ( TQWidget * child, const QIconSet & iconset, const TQString & label, int index = -1 )"
.br
.ti -1c
.BI "virtual void \fBinsertTab\fR ( TQWidget * child, QTab * tab, int index = -1 )"
.br
.ti -1c
.BI "void \fBchangeTab\fR ( TQWidget * w, const TQString & label )"
.br
.ti -1c
.BI "void \fBchangeTab\fR ( TQWidget * w, const QIconSet & iconset, const TQString & label )"
.br
.ti -1c
.BI "bool \fBisTabEnabled\fR ( TQWidget * w ) const"
.br
.ti -1c
.BI "void \fBsetTabEnabled\fR ( TQWidget * w, bool enable )"
.br
.ti -1c
.BI "void \fBsetCornerWidget\fR ( TQWidget * w, TQt::Corner corner = TQt::TopRight )"
.br
.ti -1c
.BI "TQWidget * \fBcornerWidget\fR ( TQt::Corner corner = TQt::TopRight ) const"
.br
.ti -1c
.BI "TQString \fBtabLabel\fR ( TQWidget * w ) const"
.br
.ti -1c
.BI "void \fBsetTabLabel\fR ( TQWidget * w, const TQString & l )"
.br
.ti -1c
.BI "QIconSet \fBtabIconSet\fR ( TQWidget * w ) const"
.br
.ti -1c
.BI "void \fBsetTabIconSet\fR ( TQWidget * w, const QIconSet & iconset )"
.br
.ti -1c
.BI "void \fBremoveTabToolTip\fR ( TQWidget * w )"
.br
.ti -1c
.BI "void \fBsetTabToolTip\fR ( TQWidget * w, const TQString & tip )"
.br
.ti -1c
.BI "TQString \fBtabToolTip\fR ( TQWidget * w ) const"
.br
.ti -1c
.BI "TQWidget * \fBcurrentPage\fR () const"
.br
.ti -1c
.BI "TQWidget * \fBpage\fR ( int index ) const"
.br
.ti -1c
.BI "TQString \fBlabel\fR ( int index ) const"
.br
.ti -1c
.BI "int \fBcurrentPageIndex\fR () const"
.br
.ti -1c
.BI "int \fBindexOf\fR ( TQWidget * w ) const"
.br
.ti -1c
.BI "enum \fBTabPosition\fR { Top, Bottom }"
.br
.ti -1c
.BI "TabPosition \fBtabPosition\fR () const"
.br
.ti -1c
.BI "void \fBsetTabPosition\fR ( TabPosition )"
.br
.ti -1c
.BI "enum \fBTabShape\fR { Rounded, Triangular }"
.br
.ti -1c
.BI "TabShape \fBtabShape\fR () const"
.br
.ti -1c
.BI "void \fBsetTabShape\fR ( TabShape s )"
.br
.ti -1c
.BI "int \fBmargin\fR () const"
.br
.ti -1c
.BI "void \fBsetMargin\fR ( int )"
.br
.ti -1c
.BI "int \fBcount\fR () const"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void \fBsetCurrentPage\fR ( int )"
.br
.ti -1c
.BI "virtual void \fBshowPage\fR ( TQWidget * w )"
.br
.ti -1c
.BI "virtual void \fBremovePage\fR ( TQWidget * w )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void \fBcurrentChanged\fR ( TQWidget * )"
.br
.in -1c
.SS "Properties"
.in +1c
.ti -1c
.BI "bool \fBautoMask\fR - whether the tab widget is automatically masked  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "int \fBcount\fR - the number of tabs in the tab bar  \fI(read " "only" ")\fR"
.br
.ti -1c
.BI "int \fBcurrentPage\fR - the index position of the current tab page"
.br
.ti -1c
.BI "int \fBmargin\fR - the margin in this tab widget"
.br
.ti -1c
.BI "TabPosition \fBtabPosition\fR - the position of the tabs in this tab widget"
.br
.ti -1c
.BI "TabShape \fBtabShape\fR - the shape of the tabs in this tab widget"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void \fBsetTabBar\fR ( QTabBar * tb )"
.br
.ti -1c
.BI "QTabBar * \fBtabBar\fR () const"
.br
.in -1c
.SH DESCRIPTION
The QTabWidget class provides a stack of tabbed widgets.
.PP
A tab widget provides a tab bar of tabs and a `page area' below (or above, see TabPosition) the tabs. Each tab is associated with a different widget (called a `page'). Only the current tab's page is shown in the page area; all the other tabs' pages are hidden. The user can show a different page by clicking on its tab or by pressing its Alt+\fIletter\fR accelerator if it has one.
.PP
The normal way to use QTabWidget is to do the following in the constructor: <ol type=1>
.IP 1
Create a QTabWidget.
.IP 2
Create a TQWidget for each of the pages in the tab dialog, insert children into it, set up geometry management for it and use addTab() (or insertTab()) to set up a tab and keyboard accelerator for it.
.IP 3
Connect to the signals and slots.
.PP
The position of the tabs is set with setTabPosition(), their shape with setTabShape(), and their margin with setMargin().
.PP
If you don't call addTab() and the QTabWidget is already visible, then the page you have created will not be visible. Don't confuse the object name you supply to the TQWidget constructor and the tab label you supply to addTab(). addTab() takes a name which indicates an accelerator and is meaningful and descriptive to the user, whereas the widget name is used primarily for debugging.
.PP
The signal currentChanged() is emitted when the user selects a page.
.PP
The current page is available as an index position with currentPageIndex() or as a wiget pointer with currentPage(). You can retrieve a pointer to a page with a given index using page(), and can find the index position of a page with indexOf(). Use setCurrentPage() to show a particular page by index, or showPage() to show a page by widget pointer.
.PP
You can change a tab's label and iconset using changeTab() or setTabLabel() and setTabIconSet(). A tab page can be removed with removePage().
.PP
Each tab is either enabled or disabled at any given time (see setTabEnabled()). If a tab is enabled, the tab text is drawn normally and the user can select that tab. If it is disabled, the tab is drawn in a different way and the user cannot select that tab. Note that even if a tab is disabled, the page can still be visible, for example if all of the tabs happen to be disabled.
.PP
Although tab widgets can be a very good way to split up a complex dialog, it's also very easy to get into a mess. See QTabDialog for some design hints. An alternative is to use a QWidgetStack for which you provide some means of navigating between pages, for example, a QToolBar or a QListBox.
.PP
Most of the functionality in QTabWidget is provided by a QTabBar (at the top, providing the tabs) and a QWidgetStack (most of the area, organizing the individual pages).
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also QTabDialog, QToolBox, Advanced Widgets, and Organizers.
.SS "Member Type Documentation"
.SH "QTabWidget::TabPosition"
This enum type defines where QTabWidget draws the tab row:
.TP
\fCQTabWidget::Top\fR - above the pages
.TP
\fCQTabWidget::Bottom\fR - below the pages
.SH "QTabWidget::TabShape"
This enum type defines the shape of the tabs:
.TP
\fCQTabWidget::Rounded\fR - rounded look (normal)
.TP
\fCQTabWidget::Triangular\fR - triangular look (very unusual, included for completeness)
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QTabWidget::QTabWidget ( TQWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Constructs a tabbed widget called \fIname\fR with parent \fIparent\fR, and widget flags \fIf\fR.
.SH "void QTabWidget::addTab ( TQWidget * child, const TQString & label )\fC [virtual]\fR"
Adds another tab and page to the tab view.
.PP
The new page is \fIchild\fR; the tab's label is \fIlabel\fR. Note the difference between the widget name (which you supply to widget constructors and to setTabEnabled(), for example) and the tab label. The name is internal to the program and invariant, whereas the label is shown on-screen and may vary according to language and other factors.
.PP
If the tab's \fIlabel\fR contains an ampersand, the letter following the ampersand is used as an accelerator for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes an accelerator which will move the focus to this tab.
.PP
If you call addTab() after show() the screen will flicker and the user may be confused.
.PP
Adding the same child twice will have undefined behavior.
.PP
See also insertTab().
.PP
Examples:
.)l addressbook/centralwidget.cpp and themes/themes.cpp.
.SH "void QTabWidget::addTab ( TQWidget * child, const QIconSet & iconset, const TQString & label )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Adds another tab and page to the tab view.
.PP
This function is the same as addTab(), but with an additional \fIiconset\fR.
.SH "void QTabWidget::addTab ( TQWidget * child, QTab * tab )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This is a low-level function for adding tabs. It is useful if you are using setTabBar() to set a QTabBar subclass with an overridden QTabBar::paint() function for a subclass of QTab. The \fIchild\fR is the new page and \fItab\fR is the tab to put the \fIchild\fR on.
.SH "void QTabWidget::changeTab ( TQWidget * w, const TQString & label )"
Defines a new \fIlabel\fR for page \fIw\fR's tab.
.SH "void QTabWidget::changeTab ( TQWidget * w, const QIconSet & iconset, const TQString & label )"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Defines a new \fIiconset\fR and a new \fIlabel\fR for page \fIw\fR's tab.
.SH "TQWidget * QTabWidget::cornerWidget ( TQt::Corner corner = TQt::TopRight ) const"
Returns the widget shown in the \fIcorner\fR of the tab widget or 0.
.SH "int QTabWidget::count () const"
Returns the number of tabs in the tab bar. See the "count" property for details.
.SH "void QTabWidget::currentChanged ( TQWidget * )\fC [signal]\fR"
This signal is emitted whenever the current page changes. The parameter is the new current page.
.PP
See also currentPage(), showPage(), and tabLabel().
.SH "TQWidget * QTabWidget::currentPage () const"
Returns a pointer to the page currently being displayed by the tab dialog. The tab dialog does its best to make sure that this value is never 0 (but if you try hard enough, it can be).
.SH "int QTabWidget::currentPageIndex () const"
Returns the index position of the current tab page. See the "currentPage" property for details.
.SH "int QTabWidget::indexOf ( TQWidget * w ) const"
Returns the index position of page \fIw\fR, or -1 if the widget cannot be found.
.SH "void QTabWidget::insertTab ( TQWidget * child, const TQString & label, int index = -1 )\fC [virtual]\fR"
Inserts another tab and page to the tab view.
.PP
The new page is \fIchild\fR; the tab's label is \fIlabel\fR. Note the difference between the widget name (which you supply to widget constructors and to setTabEnabled(), for example) and the tab label. The name is internal to the program and invariant, whereas the label is shown on-screen and may vary according to language and other factors.
.PP
If the tab's \fIlabel\fR contains an ampersand, the letter following the ampersand is used as an accelerator for the tab, e.g. if the label is "Bro&wse" then Alt+W becomes an accelerator which will move the focus to this tab.
.PP
If \fIindex\fR is not specified, the tab is simply appended. Otherwise it is inserted at the specified position.
.PP
If you call insertTab() after show(), the screen will flicker and the user may be confused.
.PP
See also addTab().
.SH "void QTabWidget::insertTab ( TQWidget * child, const QIconSet & iconset, const TQString & label, int index = -1 )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
Inserts another tab and page to the tab view.
.PP
This function is the same as insertTab(), but with an additional \fIiconset\fR.
.SH "void QTabWidget::insertTab ( TQWidget * child, QTab * tab, int index = -1 )\fC [virtual]\fR"
This is an overloaded member function, provided for convenience. It behaves essentially like the above function.
.PP
This is a lower-level method for inserting tabs, similar to the other insertTab() method. It is useful if you are using setTabBar() to set a QTabBar subclass with an overridden QTabBar::paint() function for a subclass of QTab. The \fIchild\fR is the new page, \fItab\fR is the tab to put the \fIchild\fR on and \fIindex\fR is the position in the tab bar that this page should occupy.
.SH "bool QTabWidget::isTabEnabled ( TQWidget * w ) const"
Returns TRUE if the page \fIw\fR is enabled; otherwise returns FALSE.
.PP
See also setTabEnabled() and TQWidget::enabled.
.SH "TQString QTabWidget::label ( int index ) const"
Returns the label of the tab at index position \fIindex\fR or TQString::null if the \fIindex\fR is out of range.
.SH "int QTabWidget::margin () const"
Returns the margin in this tab widget. See the "margin" property for details.
.SH "TQWidget * QTabWidget::page ( int index ) const"
Returns the tab page at index position \fIindex\fR or 0 if the \fIindex\fR is out of range.
.SH "void QTabWidget::removePage ( TQWidget * w )\fC [virtual slot]\fR"
Removes page \fIw\fR from this stack of widgets. Does not delete \fIw\fR.
.PP
See also addTab(), showPage(), and QWidgetStack::removeWidget().
.SH "void QTabWidget::removeTabToolTip ( TQWidget * w )"
Removes the tab tool tip for page \fIw\fR. If the page does not have a tip, nothing happens.
.PP
See also setTabToolTip() and tabToolTip().
.SH "void QTabWidget::setCornerWidget ( TQWidget * w, TQt::Corner corner = TQt::TopRight )"
Sets widget \fIw\fR to be the shown in the specified \fIcorner\fR of the tab widget.
.PP
Only the horizontal element of the \fIcorner\fR will be used.
.PP
See also cornerWidget() and tabPosition.
.SH "void QTabWidget::setCurrentPage ( int )\fC [slot]\fR"
Sets the index position of the current tab page. See the "currentPage" property for details.
.SH "void QTabWidget::setMargin ( int )"
Sets the margin in this tab widget. See the "margin" property for details.
.SH "void QTabWidget::setTabBar ( QTabBar * tb )\fC [protected]\fR"
Replaces the dialog's QTabBar heading with the tab bar \fItb\fR. Note that this must be called \fIbefore\fR any tabs have been added, or the behavior is undefined.
.PP
See also tabBar().
.SH "void QTabWidget::setTabEnabled ( TQWidget * w, bool enable )"
If \fIenable\fR is TRUE, page \fIw\fR is enabled; otherwise page \fIw\fR is disabled. The page's tab is redrawn appropriately.
.PP
QTabWidget uses TQWidget::setEnabled() internally, rather than keeping a separate flag.
.PP
Note that even a disabled tab/page may be visible. If the page is visible already, QTabWidget will not hide it; if all the pages are disabled, QTabWidget will show one of them.
.PP
See also isTabEnabled() and TQWidget::enabled.
.SH "void QTabWidget::setTabIconSet ( TQWidget * w, const QIconSet & iconset )"
Sets the iconset for page \fIw\fR to \fIiconset\fR.
.SH "void QTabWidget::setTabLabel ( TQWidget * w, const TQString & l )"
Sets the tab label for page \fIw\fR to \fIl\fR
.SH "void QTabWidget::setTabPosition ( TabPosition )"
Sets the position of the tabs in this tab widget. See the "tabPosition" property for details.
.SH "void QTabWidget::setTabShape ( TabShape s )"
Sets the shape of the tabs in this tab widget to \fIs\fR. See the "tabShape" property for details.
.SH "void QTabWidget::setTabToolTip ( TQWidget * w, const TQString & tip )"
Sets the tab tool tip for page \fIw\fR to \fItip\fR.
.PP
See also removeTabToolTip() and tabToolTip().
.SH "void QTabWidget::showPage ( TQWidget * w )\fC [virtual slot]\fR"
Ensures that page \fIw\fR is shown. This is useful mainly for accelerators.
.PP
\fBWarning:\fR Used carelessly, this function can easily surprise or confuse the user.
.PP
See also QTabBar::currentTab.
.SH "QTabBar * QTabWidget::tabBar () const\fC [protected]\fR"
Returns the current QTabBar.
.PP
See also setTabBar().
.SH "QIconSet QTabWidget::tabIconSet ( TQWidget * w ) const"
Returns the iconset of page \fIw\fR or a null iconset if \fIw\fR is not a tab page or does not have an iconset.
.SH "TQString QTabWidget::tabLabel ( TQWidget * w ) const"
Returns the label text for the tab on page \fIw\fR.
.SH "TabPosition QTabWidget::tabPosition () const"
Returns the position of the tabs in this tab widget. See the "tabPosition" property for details.
.SH "TabShape QTabWidget::tabShape () const"
Returns the shape of the tabs in this tab widget. See the "tabShape" property for details.
.SH "TQString QTabWidget::tabToolTip ( TQWidget * w ) const"
Returns the tab tool tip for page \fIw\fR or TQString::null if no tool tip has been set.
.PP
See also setTabToolTip() and removeTabToolTip().
.SS "Property Documentation"
.SH "bool autoMask"
This property holds whether the tab widget is automatically masked.
.PP
See also TQWidget::autoMask.
.SH "int count"
This property holds the number of tabs in the tab bar.
.PP
Get this property's value with count().
.SH "int currentPage"
This property holds the index position of the current tab page.
.PP
Set this property's value with setCurrentPage() and get this property's value with currentPageIndex().
.PP
See also QTabBar::currentTab.
.SH "int margin"
This property holds the margin in this tab widget.
.PP
The margin is the distance between the innermost pixel of the frame and the outermost pixel of the pages.
.PP
Set this property's value with setMargin() and get this property's value with margin().
.SH "TabPosition tabPosition"
This property holds the position of the tabs in this tab widget.
.PP
Possible values for this property are QTabWidget::Top and QTabWidget::Bottom.
.PP
See also TabPosition.
.PP
Set this property's value with setTabPosition() and get this property's value with tabPosition().
.SH "TabShape tabShape"
This property holds the shape of the tabs in this tab widget.
.PP
Possible values for this property are QTabWidget::Rounded (default) or QTabWidget::Triangular.
.PP
See also TabShape.
.PP
Set this property's value with setTabShape() and get this property's value with tabShape().

.SH "SEE ALSO"
.BR http://doc.trolltech.com/ntqtabwidget.html
.BR http://www.trolltech.com/faq/tech.html
.SH COPYRIGHT
Copyright 1992-2007 Trolltech ASA, http://www.trolltech.com.  See the
license file included in the distribution for a complete license
statement.
.SH AUTHOR
Generated automatically from the source code.
.SH BUGS
If you find a bug in Qt, please report it as described in
.BR http://doc.trolltech.com/bughowto.html .
Good bug reports help us to help you. Thank you.
.P
The definitive TQt documentation is provided in HTML format; it is
located at $TQTDIR/doc/html and can be read using TQt Assistant or with
a web browser. This man page is provided as a convenience for those
users who prefer man pages, although this format is not officially
supported by Trolltech. 
.P
If you find errors in this manual page, please report them to
.BR qt-bugs@trolltech.com .
Please include the name of the manual page (tqtabwidget.3qt) and the Qt
version (3.3.8).
